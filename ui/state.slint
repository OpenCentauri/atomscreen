import { TemperatureSensor, HeaterFan, Heater, MoonrakerFile } from "types.slint";

export global TemperatureSensors 
{
    in-out property<[TemperatureSensor]> temperature_sensors;
    in-out property<[HeaterFan]> heater_fans;
    in-out property<Heater> extruder;
    in-out property<Heater> heated_bed;

    callback set_new_target_temperature(heater_name: string, target: int);
}

export global DisplayStatus 
{
    in-out property<string> message;
    in-out property<float> progress; // 0 -> 1
}

export global PrinterAdministration
{
    callback emergency_stop();
    callback restart();
    callback firmware_restart();
}

export global GcodeCommands
{
    in-out property <bool> extruder_extrude_available: false;
    in-out property <bool> extruder_retract_available: false;
    in-out property <bool> extruder_load_filament_available: false;
    in-out property <bool> extruder_unload_filament_available: false;

    callback extruder_extrude();
    callback extruder_retract();
    callback extruder_load_filament();
    callback extruder_unload_filament();
}

export global Webhooks
{
    in-out property <bool> moonraker_connected: false;
    in-out property <string> klipper_state: "-";
    in-out property <string> klipper_state_message: "-";
}

export global Filesystem 
{
    callback list_files();
    callback download_thumbnail(index : int);
    in-out property <[MoonrakerFile]> files: [{
        path: "example.gcode", modified: 123456.0, size: 12345, permissions: "rw-r--r--",
    }, {
        path: "a-really-really-really-really-really-really-really-really-really-long-name.gcode", modified: 123456.0, size: 12345, permissions: "rw-r--r--"
    }];
    in-out property <bool> loading: false;
}

export global Utils
{
    pure callback image_exists(image: image) -> bool;  
    pure callback format_bytes(size: int) -> string;
    pure callback prettify_name(name: string) -> string;
}