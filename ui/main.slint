import { ProgressIndicator, Button, StyleMetrics, Palette, ScrollView, Slider, ComboBox, TabWidget } from "std-widgets.slint";
import { VirtualKeyboardButton } from "virtual_keyboard.slint";
import "../AdwaitaSans-Regular.ttf";
import { TemperatureSensors, DisplayStatus, PrinterAdministration, GcodeCommands, Filesystem, Utils, Webhooks } from "state.slint";
import { Heater, TemperatureSensor, MoonrakerFile } from "types.slint";
import { Icons } from "constants.slint";
import { Page } from "components/page.slint";
import { InteractableTemperatureElement, TemperaturePage } from "pages/temperature-page.slint";
import { SmallButton } from "components/small-button.slint";
import { IconButton, LeftSideIconButton, RightSideIconButton } from "components/icon-button.slint";
import { TemperatureEntry } from "components/number-pad.slint";
import { TopBar } from "components/top-bar.slint";
import { FileListPage } from "pages/file-list-page.slint";
import { BottomBarWithStatusMessage } from "components/bottom-bar.slint";
import { YesNoPrompt } from "components/yes-no-prompt.slint";
export * from "state.slint";



component ExtruderPage inherits Page {
    header: "Extruder";

    HorizontalLayout {
        spacing: StyleMetrics.layout-padding;
        visible: !t.is_keyboard_open;


        VerticalLayout {
            InteractableTemperatureElement { heater: TemperatureSensors.extruder; on_manual_entry(internal-name, friendly-name) => { t.open_keyboard(internal-name, friendly-name); } }
            Rectangle {}
            HorizontalLayout {
                height: 30px;
                spacing: StyleMetrics.layout-padding / 2;
                SmallButton {
                    text: "Load Filament";
                }
                SmallButton {
                    text: "Unload Filament";
                }
            }
        }
        
        VerticalLayout {
            width: 50px;
            spacing: 10px;
            padding-bottom: StyleMetrics.layout-padding / 2;

            // Unload
            
            GridLayout {
                padding-left: StyleMetrics.layout-padding / 2;
                padding-right: StyleMetrics.layout-padding / 2;
                IconButton {
                    icon: @image-url("assets/eject.svg");
                    checked: true;
                    border-radius: StyleMetrics.layout-padding;
                }
            }

            Text {
                text: "Extrude";
                horizontal-alignment: center;
                vertical-alignment: center;
                rotation-angle: 90deg;
            }

            GridLayout {
                padding-left: StyleMetrics.layout-padding / 2;
                padding-right: StyleMetrics.layout-padding / 2;
                IconButton {
                    icon: @image-url("assets/arrow-down.svg");
                    checked: true;
                    border-radius: StyleMetrics.layout-padding;
                }
            }
        }


    }

    t := TemperatureEntry {

    }
}

component MainView inherits Rectangle
{
    in-out property <int> current-page: 0;
    property <bool> is_emergency_prompt_open: false;
    background: Palette.alternate-background;

    VerticalLayout { 
        TopBar {

        }

        HorizontalLayout {
            VerticalLayout {
                min-width: 50px;
                spacing: 5px;

                LeftSideIconButton { icon: Icons.print; checked: root.current-page == 0; clicked => { root.current-page = 0; } }
                LeftSideIconButton { icon: Icons.temperature; checked: root.current-page == 1; clicked => { root.current-page = 1; } }
                LeftSideIconButton { icon: Icons.move; checked: root.current-page == 2; clicked => { root.current-page = 2; } }
                LeftSideIconButton { icon: Icons.emergency_stop; checked: root.current-page == 3; clicked => { is_emergency_prompt_open = true;  } foreground: red; }
            }

            Rectangle { 
                horizontal-stretch: 1;
                background: Palette.background;
                border-top-left-radius: StyleMetrics.layout-padding / 2;
                border-top-right-radius: StyleMetrics.layout-padding / 2;
                border-bottom-left-radius: DisplayStatus.message == "" ? 0 : StyleMetrics.layout-padding / 2;
                border-bottom-right-radius: DisplayStatus.message == "" ? 0 : StyleMetrics.layout-padding / 2;
                
                if root.current-page == 1: TemperaturePage {}
                if root.current-page == 0: FileListPage  {}
                if root.current-page == 6: ExtruderPage {}
            }

            VerticalLayout {
                spacing: 5px;
                min-width: 50px;

                RightSideIconButton { icon: Icons.fan; checked: root.current-page == 4; clicked => { root.current-page = 4; } }
                RightSideIconButton { icon: Icons.quick_action; checked: root.current-page == 5; clicked => { root.current-page = 5; }}
                RightSideIconButton { icon: Icons.console; checked: root.current-page == 6; clicked => { root.current-page = 6; } }
                RightSideIconButton { icon: Icons.settings; checked: root.current-page == 7; clicked => { root.current-page = 7; } }
            }
        }

        BottomBarWithStatusMessage { }
    }

    // TODO: Split this into a component
    if is_emergency_prompt_open: Rectangle 
    {
        background: #00000080;
        TouchArea { }

        VerticalLayout {
            width: 60%;
            alignment: center;

            YesNoPrompt {
                x: (parent.width - self.width) / 2;
                title: "Emergency Stop";
                message: "Are you sure you want to perform an emergency stop?";
                yes() => {
                    is_emergency_prompt_open = false;
                    PrinterAdministration.emergency_stop();
                }
                no() => {
                    is_emergency_prompt_open = false;
                }
            }
        }
    }
}

export component AppWindow inherits Window {
    width: 480px;
    height: 272px;

    default-font-family: "Adwaita Sans";

    if Webhooks.moonraker_connected && Webhooks.klipper_state == "Ready" : MainView {
        width: 100%;
        height: 100%;
    }

    if Webhooks.moonraker_connected && Webhooks.klipper_state != "Ready" && Webhooks.klipper_state != "" : VerticalLayout {
        width: 100%;
        spacing: 20px;
        Rectangle {}
        Rectangle {
            VerticalLayout { 
                width: 70%;
                spacing: 20px;
                alignment: center;
                Text {
                    text: Webhooks.klipper_state;
                    font-weight: 900;
                    horizontal-alignment: center;
                }
                Text {
                    text: Webhooks.klipper_state_message;
                    horizontal-alignment: center;
                }
                if Webhooks.klipper_state == "Error" || Webhooks.klipper_state == "Shutdown": HorizontalLayout {
                    spacing: 20px;
                    Button {
                        text: "Restart";
                        clicked => { PrinterAdministration.restart(); }
                    }
                    Button {
                        text: "Firmware Restart";
                        clicked => { PrinterAdministration.firmware_restart(); }
                    }
                }
            } 
        }
        Rectangle {}
    }

    if !Webhooks.moonraker_connected || Webhooks.klipper_state == "": VerticalLayout
    {
        VerticalLayout {
            width: 100%;
            spacing: 20px;
            Rectangle {

            }
            Rectangle {
                VerticalLayout { 
                    width: 200px;
                    spacing: 20px;
                    alignment: center;
                    Text {
                        text: "Connecting to moonraker...";
                        horizontal-alignment: center;
                    }
                    ProgressIndicator {
                        width: 100%;
                        indeterminate: true;
                    }
                } 
            }
            Rectangle {

            }
        }
    }
}