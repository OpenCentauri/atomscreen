import { Heater } from "../types.slint";
import { SmallButton } from "../components/small-button.slint";
import { TemperatureSensors, Utils, GcodeCommands } from "../state.slint"; 
import { TemperatureSensor } from "../types.slint";
import { Page } from "../components/page.slint";
import { ScrollView, Palette, ComboBox, StyleMetrics, Button, GroupBox, CheckBox } from "std-widgets.slint";
import { TemperatureEntry } from "../components/number-pad.slint";
import { Icons, Constants } from "../constants.slint";
import { VerticalStart, VerticalScrollable, VerticalStretch, VerticalCenter } from "../components/vertical.slint";
import { HorizontalStretch } from "../components/horizontal.slint";
import { Dropdown } from "../components/dropdown-select.slint";

export component InteractableTemperatureElement inherits VerticalStart {
    in property <Heater> heater;
    property <int> target: heater.target;
    property <string> friendly-name: Utils.prettify_name(heater.name);
    in property <string> extra-text: ""; 

    changed heater => {
        target = heater.target;
    }

    callback on_manual_entry(internal-name: string, friendly-name: string);

    HorizontalStretch {
        height: Constants.list-entry-height;
        Image {
            colorize: Palette.foreground;
            source: heater.name == "extruder"
                ? Icons.extruder
                : heater.name == "heater_bed"
                    ? Icons.bed
                    : Icons.fan;
        }

        VerticalCenter {
            spacing: 2px;
            horizontal-stretch: 1;
            Text {
                text: friendly-name;
                horizontal-stretch: 1;
                vertical-alignment: center;
                overflow: elide;
            }

            if extra-text != "": Text {
                text: extra-text;
                horizontal-stretch: 1;
                vertical-alignment: center;
                overflow: elide;
                font-size: Constants.font-size-sm;
            }
        }

        Dropdown {
            options: Utils.create_temperature_lists(heater.presets);
            border-color: Palette.selection-background;
            text: target > 0
                ? heater.temperature + "째C -> " + target + "째C"
                : heater.temperature + "째C";
            selected(option, index) => {
                if option == "Off" {
                    TemperatureSensors.set_new_target_temperature(heater.name, 0);
                }
                else if option == "Set" {
                    on_manual_entry(heater.name, friendly-name);
                }
                else {
                    TemperatureSensors.set_new_target_temperature(heater.name, heater.presets[index - 1]);
                }
            }
        }
    }

    @children
}

component ReadOnlyTemperatureElement inherits HorizontalStretch { 
    in property <TemperatureSensor> temperature_sensor;
    height: Constants.list-entry-height;
    padding-right: Constants.padding-half;

    Image {
        colorize: Palette.foreground;
        source: Icons.device-temperature;
    }

    Text {
        text: Utils.prettify_name(temperature_sensor.name);
        horizontal-stretch: 1;
        vertical-alignment: center;
        overflow: elide;
    }

    Text {
        text: temperature_sensor.temperature + "째C";
        vertical-alignment: center;
        font-weight: Constants.font-weight-bold;
    }
}

export component FilamentMenuDialog inherits Rectangle {
    callback close();
    callback on_manual_entry(internal-name : string, friendly-name : string); // TODO: Make the temp numpad a popup

    VerticalStretch {
        SmallButton {
            height: 3rem;
            icon: Icons.close;
            text: "Back";
            clicked => { root.close(); }
        }

        InteractableTemperatureElement { 
            heater: TemperatureSensors.extruder;
            on_manual_entry(internal-name, friendly-name) => { root.on_manual_entry(internal-name, friendly-name); }
        }

    
        HorizontalStretch {
            vertical-stretch: 1;

            if GcodeCommands.extruder_retract_available || GcodeCommands.extruder_extrude_available: VerticalStretch {
                if GcodeCommands.extruder_retract_available: SmallButton {
                    icon: Icons.eject;
                    text: "Retract";
                    clicked => { GcodeCommands.extruder_retract(); }
                }
                if GcodeCommands.extruder_extrude_available: SmallButton {
                    icon: Icons.arrow-down;
                    text: "Extrude";
                    clicked => { GcodeCommands.extruder_extrude(); }
                }
            }
            
            if GcodeCommands.extruder_unload_filament_available || GcodeCommands.extruder_load_filament_available: VerticalStretch {
                if GcodeCommands.extruder_unload_filament_available: SmallButton {
                    text: "Unload filament";
                    clicked => { GcodeCommands.extruder_unload_filament(); }
                }
                if GcodeCommands.extruder_load_filament_available: SmallButton {
                    text: "Load filament";
                    clicked => { GcodeCommands.extruder_load_filament(); }
                }
            }       
        }
    }
}

export component TemperaturePage inherits Page {
    header: "Temperature";

    property <bool> is_filament_menu_open: false;
    property <int> selection : 0;

    VerticalScrollable {
        visible: !t.is_keyboard_open && !is_filament_menu_open;
        
        InteractableTemperatureElement { 
            heater: TemperatureSensors.extruder;
            on_manual_entry(internal-name, friendly-name) => { t.open_keyboard(internal-name, friendly-name); } 

            btn := SmallButton {
                height: 30px;
                text: "Filament options";
                clicked => { is_filament_menu_open = true; }
            }
        }

        if TemperatureSensors.heated_bed.name != "": InteractableTemperatureElement { 
            heater: TemperatureSensors.heated_bed; 
            on_manual_entry(internal-name, friendly-name) => { 
                t.open_keyboard(internal-name, friendly-name); 
            }
        }

        for temp-fan in TemperatureSensors.heater_fans: InteractableTemperatureElement { 
            heater: temp-fan.heater; 
            extra-text: temp-fan.speed * 100 + "%";   
            on_manual_entry(internal-name, friendly-name) => { 
                t.open_keyboard(internal-name, friendly-name); 
            } 
        }

        for temp-sensor in TemperatureSensors.temperature_sensors: ReadOnlyTemperatureElement {
            temperature_sensor: temp-sensor;  
        }
    }

    if is_filament_menu_open: FilamentMenuDialog {
        close => { is_filament_menu_open = false; }
        on_manual_entry(internal-name, friendly-name) => { t.open_keyboard(internal-name, friendly-name); }

        visible: !t.is_keyboard_open;
    }

    t := TemperatureEntry {

    }
}