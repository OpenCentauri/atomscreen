import { VirtualKeyboardButton } from "../virtual_keyboard.slint";
import { Icons } from "../constants.slint";
import { StyleMetrics } from "std-widgets.slint";
import { TemperatureSensors } from "../state.slint";

export component NumberPad inherits Rectangle 
{
    in property <string> name;
    callback accept(number: int);
    callback cancel();
    property <int> current-number: 0;
    in property <bool> can_go_negative: false;

    function add(key: int) {
        if (current-number * 10 + key > 999
            || current-number * 10 - key < -999) {
            return;
        }

        current-number = current-number >= 0
            ? current-number * 10 + key
            : current-number * 10 - key;
    }

    function remove() {
        current-number = current-number >= 0
            ? floor(current-number / 10)
            : ceil(current-number / 10);
    }

    VerticalLayout {
        spacing: 5px;
        
        HorizontalLayout {
            spacing: 5px;
            vertical-stretch: 1;
            
            Text {
                text: name + ": " + current-number;
                horizontal-alignment: center;
                vertical-alignment: center;
                font-size: 20px;
                font-weight: 900;
                horizontal-stretch: 5;
            }

            VirtualKeyboardButton { icon: Icons.backspace; key-pressed => { remove(); } horizontal-stretch: 1; }

            if can_go_negative: VirtualKeyboardButton { key: current-number >= 0 ? "-" : "+"; key-pressed => { current-number *= -1; } }
        }

        HorizontalLayout {
            spacing: 5px;
            vertical-stretch: 1;
            VirtualKeyboardButton { key: "1"; key-pressed => { add(1) } }
            VirtualKeyboardButton { key: "2"; key-pressed => { add(2) } }
            VirtualKeyboardButton { key: "3"; key-pressed => { add(3) } }
            VirtualKeyboardButton { icon: Icons.check; key-pressed => { accept(current-number); current-number = 0; } }
        }

        HorizontalLayout {
            spacing: 5px;
            vertical-stretch: 1;
            VirtualKeyboardButton { key: "4"; key-pressed => { add(4) } }
            VirtualKeyboardButton { key: "5"; key-pressed => { add(5) } }
            VirtualKeyboardButton { key: "6"; key-pressed => { add(6) } }
            VirtualKeyboardButton { icon: Icons.close; key-pressed => { cancel(); } }
        }

        HorizontalLayout {
            spacing: 5px;
            vertical-stretch: 1;
            VirtualKeyboardButton { key: "7"; key-pressed => { add(7) } }
            VirtualKeyboardButton { key: "8"; key-pressed => { add(8) } }
            VirtualKeyboardButton { key: "9"; key-pressed => { add(9) } }
            VirtualKeyboardButton { key: "0"; key-pressed => { add(0) } }
        }
    }
}

export component TemperatureEntry
{
    out property <bool> is_keyboard_open: false;
    property <string> internal_temp_device_name;
    property <string> friendly_temp_device_name;

    public function open_keyboard(internal_name: string, friendly_name: string) {
        internal_temp_device_name = internal_name;
        friendly_temp_device_name = friendly_name;
        is_keyboard_open = true;
    }

    width: 100%;
    height: 100%;

    if is_keyboard_open: GridLayout {
        padding-left: StyleMetrics.layout-padding / 2;
        padding-right: StyleMetrics.layout-padding / 2;
        NumberPad {
            name: friendly_temp_device_name;
            accept(number) => {
                TemperatureSensors.set_new_target_temperature(internal_temp_device_name, number);
                is_keyboard_open = false;
            }
            cancel() => {
                is_keyboard_open = false;
            }
        }
    }
}